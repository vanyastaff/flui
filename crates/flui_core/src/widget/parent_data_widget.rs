//! ParentDataWidget - Configures parent data on RenderObject children
//!
//! ParentDataWidget is used by layout widgets to attach layout-specific data
//! to their children in the element tree.

use super::{ProxyWidget, DynWidget};
use crate::render::ParentData;

/// Widget that configures parent data on RenderObject children
///
/// ParentDataWidget is used by layout widgets to attach layout-specific data
/// to their children. For example:
/// - `Flexible` (for Row/Column) sets flex factor in FlexParentData
/// - `Positioned` (for Stack) sets offset in StackParentData
///
/// The parent data is created when the child is mounted.
///
/// # Example
///
/// ```rust,ignore
/// use flui_core::{ParentDataWidget, ProxyWidget, ParentData};
/// use flui_rendering::FlexParentData;
/// use flui_derive::ParentDataWidget as DeriveParentDataWidget;
///
/// #[derive(DeriveParentDataWidget, Debug, Clone)]
/// struct Flexible {
///     flex: i32,
///     child: BoxedWidget,
/// }
///
/// impl ProxyWidget for Flexible {
///     fn child(&self) -> &dyn DynWidget {
///         &*self.child
///     }
/// }
///
/// impl ParentDataWidget<FlexParentData> for Flexible {
///     fn create_parent_data(&self) -> Box<dyn ParentData> {
///         Box::new(FlexParentData::new(self.flex, FlexFit::Loose))
///     }
///
///     fn debug_typical_ancestor_widget_class(&self) -> &'static str {
///         "Flex"
///     }
/// }
/// // Widget and DynWidget auto-generated by derive macro!
/// ```
///
/// # Derive Macro
///
/// Use `#[derive(ParentDataWidget)]` from `flui_derive` to auto-implement
/// `Widget` (with `type Element = ParentDataElement<Self, T>`) and `DynWidget`
pub trait ParentDataWidget<T: ParentData>: ProxyWidget + DynWidget {
    /// Create parent data for the child
    ///
    /// This is called when the child is mounted or when this widget updates.
    /// The returned ParentData will be stored in ElementTree for the child.
    ///
    /// # Example
    ///
    /// ```rust,ignore
    /// fn create_parent_data(&self) -> Box<dyn ParentData> {
    ///     Box::new(FlexParentData::new(self.flex, self.fit))
    /// }
    /// ```
    fn create_parent_data(&self) -> Box<dyn ParentData>;

    /// Debug: Typical ancestor widget class that should contain this widget
    ///
    /// For example, `Flexible` returns "Flex" (Row/Column).
    /// This is used for debug assertions and error messages.
    ///
    /// # Example
    ///
    /// ```rust,ignore
    /// fn debug_typical_ancestor_widget_class(&self) -> &'static str {
    ///     "Flex"  // Flexible should be inside Row/Column
    /// }
    /// ```
    fn debug_typical_ancestor_widget_class(&self) -> &'static str;

    /// Can this widget apply parent data out of turn?
    ///
    /// Some parent data widgets can apply their data even if they're not
    /// direct children of the RenderObject widget. This is an optimization.
    ///
    /// Default is `false` - most parent data widgets must be direct children.
    fn debug_can_apply_out_of_turn(&self) -> bool {
        false
    }
}


