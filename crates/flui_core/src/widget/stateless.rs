//! StatelessWidget - immutable widgets that build once
//!
//! Stateless widgets don't hold any mutable state - all configuration comes from
//! their fields which are immutable.
//!
//! # Implementation
//!
//! Use the `#[derive(StatelessWidget)]` macro from `flui_derive` to automatically
//! implement `Widget` and `DynWidget`:
//!
//! ```rust,ignore
//! use flui_core::{StatelessWidget, BoxedWidget};
//! use flui_derive::StatelessWidget as DeriveStatelessWidget;
//!
//! #[derive(DeriveStatelessWidget, Clone, Debug)]
//! struct Greeting {
//!     name: String,
//! }
//!
//! impl StatelessWidget for Greeting {
//!     fn build(&self) -> BoxedWidget {
//!         Box::new(Text::new(format!("Hello, {}!", self.name)))
//!     }
//! }
//! // Widget and DynWidget are auto-generated by the macro!
//! ```

use std::fmt;
use super::{BoxedWidget, DynWidget};

/// StatelessWidget - immutable widget that builds once
///
/// Stateless widgets don't hold any mutable state - all configuration comes from
/// their fields which are immutable.
///
/// # Example
///
/// ```rust,ignore
/// use flui_core::{StatelessWidget, BoxedWidget};
/// use flui_derive::StatelessWidget as DeriveStatelessWidget;
///
/// #[derive(DeriveStatelessWidget, Clone, Debug)]
/// struct Greeting {
///     name: String,
/// }
///
/// impl StatelessWidget for Greeting {
///     fn build(&self) -> BoxedWidget {
///         Box::new(Text::new(format!("Hello, {}!", self.name)))
///     }
/// }
/// ```
///
/// # Derive Macro
///
/// The `#[derive(StatelessWidget)]` macro from `flui_derive` automatically implements:
/// - `Widget` trait (with `type Element = ComponentElement<Self>`)
/// - `DynWidget` trait (for heterogeneous storage)
///
/// **Important:** You must still manually implement the `StatelessWidget` trait itself
/// (specifically the `build()` method), but Widget/DynWidget are generated for you.
pub trait StatelessWidget: fmt::Debug + Clone + Send + Sync + DynWidget + 'static {
    /// Build this widget's child widget tree
    ///
    /// Called when the widget is first built or when it needs to rebuild.
    /// Should return the root widget of the child tree.
    fn build(&self) -> BoxedWidget;
}
