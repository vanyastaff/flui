{
  "permissions": {
    "allow": [
      "Bash(git commit:*)",
      "Bash(timeout 10 cargo run:*)",
      "Bash(cargo run:*)",
      "Bash(cargo test:*)",
      "Bash(cargo build)",
      "Bash(tokei src --type rust)",
      "Bash(cargo clippy --all-targets)",
      "Bash(cargo new flui_derive --lib)",
      "Bash(cargo build -p flui_core --lib)",
      "Bash(cargo build -p flui_derive)",
      "Bash(cat crates/flui_core/src/foundation/mod.rs)",
      "Bash(cargo build -p flui_core)",
      "WebSearch",
      "Bash(grep \"cannot find type \\`T\\`\" -B 5)",
      "Bash(cargo clippy --all-targets 2)",
      "Bash(1)",
      "Bash(cargo build:*)",
      "WebFetch(domain:docs.rs)",
      "Bash(git add crates/flui_core/ crates/flui_derive/ Cargo.toml Cargo.lock)",
      "Bash(git push)",
      "Bash(cargo check:*)",
      "Bash(tokei:*)",
      "Bash(cat:*)",
      "Bash(git add -u)",
      "Bash(git add crates/flui_core/src/element/component.rs crates/flui_core/src/element/element.rs crates/flui_core/src/element/element_tree.rs crates/flui_core/src/element/inherited.rs crates/flui_core/src/element/stateful.rs crates/flui_core/src/element/pipeline_owner.rs crates/flui_core/src/render/render_pipeline.rs)",
      "Bash(cargo clippy -p flui_core)",
      "Bash(cargo fix --lib -p flui_core --allow-dirty)",
      "Bash(cargo bench --bench element_enum)",
      "Bash(tee bench_results.txt)",
      "Bash(git add -A)",
      "Bash(git add crates/flui_core/Cargo.toml crates/flui_core/benches/element_enum.rs crates/flui_core/src/element/*.rs crates/flui_core/src/widget/*.rs crates/flui_core/src/render/*.rs migration/MIGRATION_STATUS.md)",
      "Bash(test:*)",
      "Bash(tee performance_results.txt)",
      "Bash(git add crates/flui_core/examples/element_performance_test.rs crates/flui_devtools/Cargo.toml migration/PERFORMANCE_RESULTS.md)",
      "Bash(git add migration/PERFORMANCE_RESULTS.md)",
      "Bash(cargo update fdeflate)",
      "Bash(cargo bench --bench element_enum --no-default-features)",
      "Bash(rustc --version)",
      "Bash(cargo clean)",
      "Bash(git add crates/flui_core/src/element/stateful.rs crates/flui_core/src/widget/stateful.rs)",
      "Bash(cargo clippy -p flui_core -- -D warnings)",
      "Bash(git restore --staged .claude/settings.local.json)",
      "Bash(cargo --version)",
      "Bash(rustup update stable)",
      "Bash(rustup default stable)",
      "Bash(rustup set profile minimal)",
      "Bash(rustup install 1.89.0)",
      "Bash(rustup default 1.89.0)",
      "Bash(rustup install 1.82.0)",
      "Bash(rustup default 1.82.0)",
      "Bash(rustup set profile default)",
      "Bash(rustup default nightly)",
      "Bash(rustup install 1.88.0)",
      "Bash(rustup default 1.88.0)",
      "Bash(cargo tree --package flui_core --depth 1)",
      "Bash(git add crates/flui_engine/src/layer/base.rs crates/flui_engine/src/layer/handle.rs crates/flui_engine/src/layer/clip.rs crates/flui_engine/src/layer/mod.rs crates/flui_engine/src/paint_context.rs crates/flui_engine/src/lib.rs crates/flui_engine/src/painter/mod.rs)",
      "Bash(git add crates/flui_painting/Cargo.toml crates/flui_painting/src/ crates/flui_types/src/painting/ crates/flui_types/src/styling/decoration.rs)",
      "Bash(git add Cargo.toml Cargo.lock)",
      "Bash(git add crates/flui_painting/ crates/flui_engine/src/painter/mod.rs crates/flui_types/src/painting/ crates/flui_types/Cargo.toml)",
      "Bash(git add crates/flui_types/)",
      "Bash(cargo clean -p flui_types)",
      "Bash(rustup default 1.90.0)",
      "Bash(git add Cargo.toml crates/flui_types/src/geometry/point.rs)",
      "Bash(git add Cargo.toml)",
      "Bash(cargo fix --lib -p flui_engine --allow-dirty)",
      "Bash(cargo tree -p flui_engine -e normal)",
      "Bash(cargo tree -i arboard -p flui_engine)",
      "Bash(rustup install 1.85.0)"
    ],
    "deny": [],
    "ask": []
  }
}
