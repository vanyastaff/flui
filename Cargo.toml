[workspace]
resolver = "2"
members = [
    "crates/flui_types",        # Base types - no dependencies
    "crates/flui_core",         # Core with foundation utilities
    "crates/flui_rendering",
    "crates/flui_widgets",
    "crates/flui_app",
    "crates/flui_painting",
    "crates/flui_engine", "crates/flui_derive", "crates/flui_devtools",       # Rendering engine - Layer/Scene/Painter
    # "crates/flui_animation",
    # "crates/flui_gestures",
    # "crates/flui_scheduler",
    # "crates/flui_platform",
    # "crates/flui_provider",
]

[workspace.package]
version = "0.1.0"
edition = "2024"
rust-version = "1.90"
license = "MIT OR Apache-2.0"
authors = ["Flui Contributors"]
repository = "https://github.com/yourusername/flui"

[workspace.dependencies]
# CORE EGUI & PLATFORM (v0.29 - compatible with edition 2021)
egui = { version = "0.29", features = ["default", "serde"] }
eframe = { version = "0.29", default-features = false, features = ["default_fonts", "glow", "persistence", "wayland", "x11"] }
egui_extras = { version = "0.29", features = ["image", "svg", "file"] }

# ASYNC RUNTIME (Stable: 1.43 LTS - March 2026, compatible with current Rust)
tokio = { version = "1.43", features = ["full", "rt-multi-thread", "macros", "sync", "time"] }
async-trait = "0.1"
futures = "0.3"

# SYNCHRONIZATION
parking_lot = "0.12"
once_cell = "1.20"
dashmap = "6.1"
arc-swap = "1.7"

# COLLECTIONS
indexmap = { version = "2.5", features = ["serde"] }
smallvec = { version = "1.13", features = ["serde", "union"] }
slotmap = "1.0"

# SERIALIZATION
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"

# BUILDER UTILITIES
bon = { version = "3.8" }

# ERROR HANDLING & LOGGING
thiserror = "2.0"
anyhow = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"] }

# MATH & GEOMETRY (Latest: 0.30.8 - September 2025)
glam = { version = "0.30", features = ["serde", "bytemuck"] }
ordered-float = "5.1.0"

# IMAGE PROCESSING
image = { version = "0.25", features = ["png", "jpeg", "gif", "webp"] }
resvg = "0.45"
usvg = "0.45"

# GPU RENDERING (WGPU BACKEND - Stable versions compatible with Rust 1.89)
wgpu = { version = "27.0", features = ["wgsl"] }  # Latest: 27.0.1 (Oct 2025)
winit = "0.30.10"  # Stable: 0.30.10 (April 2025)
bytemuck = { version = "1.18", features = ["derive"] }  # Stable compatible
glyphon = "0.9"  # GPU text rendering (Latest: 0.9.0)
cosmic-text = "0.14"  # Text shaping (via glyphon)
guillotiere = "0.6"  # Texture atlas bin packing
lyon = "1.0"  # Path tesselation
pollster = "0.3"  # Block on async for examples

# MEMORY & CACHING
lru = "0.16.2"  # Simple LRU (keep for compatibility)
moka = { version = "0.12", features = ["future"] }  # High-performance cache
bumpalo = "3.16"  # Bump allocator for frame-temp data
typed-arena = "2.0"  # Type-safe arena allocator

# NETWORKING
reqwest = { version = "0.12", features = ["json", "stream", "rustls-tls"] }
url = { version = "2.5", features = ["serde"] }

# UTILITIES
itertools = "0.14.0"
ahash = "0.8"
rustc-hash = "2.0"  # FxHash - faster for small keys
bitflags = "2.10"
dyn-clone = "1.0"
downcast-rs = "2.0.2"
fastrand = "2.0"  # Fast RNG for widget IDs, jitter

# STRING INTERNING
lasso = { version = "0.7", features = ["multi-threaded"] }  # Fast string interning

# OPTIMIZED SMART POINTERS
triomphe = "0.1"  # Arc optimized for immutable data

# SPECIALIZED COLLECTIONS
tinyvec = { version = "1.8", features = ["alloc"] }  # Smaller than SmallVec

# PERFORMANCE & PROFILING
criterion = "0.7"
tracing-tracy = "0.11"  # Tracy profiler integration
puffin_http = "0.16"  # Puffin HTTP server

[package]
name = "flui"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
description = "Flutter-inspired declarative UI framework built on egui 0.33"
keywords = ["gui", "ui", "egui", "flutter", "reactive"]

[dependencies]
# Flui crates
flui_types = { path = "crates/flui_types" }
flui_core = { path = "crates/flui_core" }
flui_engine = { path = "crates/flui_engine" }
flui_app = { path = "crates/flui_app", optional = true }
flui_widgets = { path = "crates/flui_widgets", optional = true }

# For wgpu_demo example
parking_lot = { workspace = true }
pollster = { workspace = true }
env_logger = "0.11"
winit = { workspace = true }

# Workspace dependencies
egui.workspace = true
eframe.workspace = true
tokio.workspace = true
serde.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true

# Optional profiling dependencies
puffin = { version = "0.19", optional = true }
puffin_egui = { version = "0.29", optional = true }
tracing-tracy = { workspace = true, optional = true }
puffin_http = { workspace = true, optional = true }

[dev-dependencies]
criterion.workspace = true

[features]
default = ["persistence"]
persistence = ["eframe/persistence"]
profiling = ["puffin", "puffin_egui", "puffin_http"]
tracy = ["tracing-tracy"]
full-profiling = ["profiling", "tracy"]

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
strip = true
panic = "abort"

[profile.dev]
opt-level = 1

[profile.dev.package."*"]
opt-level = 2

# Standalone example using only flui_core + flui_engine
[[example]]
name = "standalone_demo"
path = "examples/standalone_demo.rs"
required-features = []  # Doesn't need flui_app or flui_widgets

# Window demo - shows actual rendered content in a window!
[[example]]
name = "window_demo"
path = "examples/window_demo.rs"
required-features = []  # Uses flui_core + flui_engine + eframe

# WGPU demo - GPU-accelerated rendering with standalone wgpu backend
[[example]]
name = "wgpu_demo"
path = "examples/wgpu_demo.rs"
required-features = []  # Standalone wgpu + winit

# Egui demo - CPU rendering with egui backend (for comparison)
[[example]]
name = "egui_demo"
path = "examples/egui_demo.rs"
required-features = []  # Uses flui_engine/egui + eframe

# Unified App - Backend-agnostic API (automatically selects backend)
[[example]]
name = "unified_app"
path = "examples/unified_app.rs"
required-features = []  # Auto-selects backend based on features
