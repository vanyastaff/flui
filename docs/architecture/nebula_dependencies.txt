# Nebula Framework - Complete Cargo.toml with All Dependencies
# Организовано по категориям для удобства

[workspace]
resolver = "2"
members = [
    "crates/nebula_core",
    "crates/nebula_foundation",
    "crates/nebula_widgets",
    "crates/nebula_rendering",
    "crates/nebula_painting",
    "crates/nebula_animation",
    "crates/nebula_gestures",
    "crates/nebula_scheduler",
    "crates/nebula_platform",
    "crates/nebula_provider",
    "nebula",
]

[workspace.package]
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
license = "MIT OR Apache-2.0"
repository = "https://github.com/yourusername/nebula"

#==============================================================================
# WORKSPACE DEPENDENCIES
#==============================================================================

[workspace.dependencies]
# ============================================================================
# CORE EGUI & PLATFORM
# ============================================================================
egui = { version = "0.29", features = ["default", "serde"] }
eframe = { version = "0.29", default-features = false, features = [
    "default_fonts",
    "glow",           # OpenGL backend
    "persistence",    # Save/load app state
    "wayland",        # Linux Wayland support
    "x11",            # Linux X11 support
] }
egui_extras = { version = "0.29", features = [
    "image",          # Image support
    "svg",            # SVG support
    "file",           # File loading
    "syntect",        # Code highlighting (optional)
] }
emath = "0.29"       # Math utilities from egui
epaint = "0.29"      # Paint primitives from egui

# ============================================================================
# ASYNC RUNTIME & FUTURES
# ============================================================================
tokio = { version = "1.40", features = [
    "full",           # All features
    "rt-multi-thread", # Multi-threaded runtime
    "macros",         # #[tokio::main], #[tokio::test]
    "sync",           # Synchronization primitives
    "time",           # Time utilities
    "fs",             # Async file I/O
    "net",            # Async networking
    "io-util",        # IO utilities
    "signal",         # Signal handling
] }
async-trait = "0.1"  # Async trait support
futures = "0.3"      # Futures utilities
futures-util = "0.3" # Additional futures utilities
async-channel = "2.3" # Async MPSC channels
flume = "0.11"       # Fast MPSC channels

# ============================================================================
# SERIALIZATION
# ============================================================================
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"   # JSON serialization
ron = "0.8"          # Rusty Object Notation (better than JSON for Rust)
bincode = "1.3"      # Binary serialization (fast)
toml = "0.8"         # TOML configuration files
rmp-serde = "1.3"    # MessagePack serialization

# ============================================================================
# IMAGE PROCESSING & LOADING
# ============================================================================
image = { version = "0.25", features = [
    "png",            # PNG support
    "jpeg",           # JPEG support
    "gif",            # GIF support
    "webp",           # WebP support
    "ico",            # ICO support
    "bmp",            # BMP support
    "tiff",           # TIFF support
] }
resvg = "0.44"       # SVG rendering
usvg = "0.44"        # SVG parsing

# ============================================================================
# MEMORY & CACHING
# ============================================================================
lru = "0.12"         # LRU cache
dashmap = "6.1"      # Concurrent HashMap
once_cell = "1.20"   # Lazy static initialization
parking_lot = "0.12" # Faster Mutex/RwLock
arc-swap = "1.7"     # Atomic Arc swapping

# ============================================================================
# ERROR HANDLING
# ============================================================================
thiserror = "1.0"    # Error derive macro
anyhow = "1.0"       # Flexible error handling
color-eyre = "0.6"   # Pretty error reports (dev)

# ============================================================================
# LOGGING & TRACING
# ============================================================================
tracing = "0.1"      # Structured logging
tracing-subscriber = { version = "0.3", features = [
    "env-filter",     # Environment-based filtering
    "json",           # JSON output
    "fmt",            # Formatted output
] }
log = "0.4"          # Logging facade

# ============================================================================
# TIME & DURATION
# ============================================================================
chrono = { version = "0.4", features = ["serde"] }
time = { version = "0.3", features = ["formatting", "parsing", "macros"] }

# ============================================================================
# COLLECTIONS & DATA STRUCTURES
# ============================================================================
indexmap = { version = "2.5", features = ["serde"] } # Ordered HashMap
smallvec = { version = "1.13", features = ["serde", "union"] } # Stack-allocated vectors
tinyvec = { version = "1.8", features = ["alloc", "serde"] }   # Tiny vectors
slotmap = "1.0"      # Generational arena allocator
thunderdome = "0.6"  # Arena allocator with stable indices

# ============================================================================
# MATH & NUMERICS
# ============================================================================
glam = { version = "0.29", features = ["serde", "bytemuck"] } # Vector math
nalgebra = "0.33"    # Linear algebra
euclid = "0.22"      # 2D/3D geometry
ordered-float = "4.3" # Ord/Hash for floats

# ============================================================================
# NETWORKING (for image loading, etc.)
# ============================================================================
reqwest = { version = "0.12", features = [
    "json",           # JSON support
    "stream",         # Stream support
    "multipart",      # Multipart form data
    "rustls-tls",     # TLS support (rustls)
] }
url = { version = "2.5", features = ["serde"] }

# ============================================================================
# FILE I/O & COMPRESSION
# ============================================================================
directories = "5.0"  # Standard directories (config, cache, etc.)
walkdir = "2.5"      # Recursive directory walking
notify = "6.1"       # File system watching
zip = "2.2"          # ZIP file support
flate2 = "1.0"       # GZIP/DEFLATE compression

# ============================================================================
# MACROS & CODE GENERATION
# ============================================================================
paste = "1.0"        # Token pasting in macros
quote = "1.0"        # Quasi-quoting for proc macros
syn = { version = "2.0", features = ["full", "extra-traits"] } # Rust parser
proc-macro2 = "1.0"  # Proc macro helpers
darling = "0.20"     # Derive macro attributes

# ============================================================================
# STRING & TEXT
# ============================================================================
unicode-segmentation = "1.12" # Unicode grapheme clusters
regex = "1.11"       # Regular expressions
lazy_static = "1.5"  # Lazy static variables

# ============================================================================
# RANDOM & HASHING
# ============================================================================
rand = "0.8"         # Random number generation
fastrand = "2.1"     # Fast random numbers
ahash = "0.8"        # Fast hashing algorithm
xxhash-rust = { version = "0.8", features = ["xxh3"] } # xxHash

# ============================================================================
# PERFORMANCE & PROFILING
# ============================================================================
puffin = "0.19"      # Profiler (integrates with egui)
puffin_egui = "0.29" # Puffin viewer for egui
criterion = "0.5"    # Benchmarking (dev)

# ============================================================================
# UTILITY CRATES
# ============================================================================
itertools = "0.13"   # Iterator extensions
rayon = "1.10"       # Data parallelism
bytemuck = { version = "1.18", features = ["derive"] } # Cast between types
bitflags = "2.6"     # Bitflag macros
derive_more = "1.0"  # Additional derives
delegate = "0.13"    # Delegation macro
strum = { version = "0.26", features = ["derive"] } # Enum utilities

# ============================================================================
# OPTIONAL: ADVANCED FEATURES
# ============================================================================
# GPU compute (optional, for advanced rendering)
wgpu = { version = "22.1", optional = true }
pollster = { version = "0.3", optional = true }

# Database (optional, for persistence)
rusqlite = { version = "0.32", features = ["bundled"], optional = true }
sqlx = { version = "0.8", features = ["runtime-tokio", "sqlite"], optional = true }

# Hot reloading (optional, for development)
# Note: This is complex, requires platform-specific setup
# hot-lib-reloader = { version = "0.6", optional = true }

#==============================================================================
# MAIN NEBULA PACKAGE
#==============================================================================

[package]
name = "nebula"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
description = "Flutter-inspired declarative UI framework built on egui"
keywords = ["gui", "ui", "egui", "flutter", "reactive"]
categories = ["gui", "rendering", "visualization"]

[dependencies]
# Internal crates
nebula_core = { path = "crates/nebula_core" }
nebula_foundation = { path = "crates/nebula_foundation" }
nebula_widgets = { path = "crates/nebula_widgets" }
nebula_rendering = { path = "crates/nebula_rendering" }
nebula_painting = { path = "crates/nebula_painting" }
nebula_animation = { path = "crates/nebula_animation" }
nebula_gestures = { path = "crates/nebula_gestures" }
nebula_scheduler = { path = "crates/nebula_scheduler" }
nebula_platform = { path = "crates/nebula_platform" }
nebula_provider = { path = "crates/nebula_provider" }

# Core dependencies
egui.workspace = true
eframe.workspace = true
tokio.workspace = true
serde.workspace = true
tracing.workspace = true

[dev-dependencies]
criterion.workspace = true
color-eyre.workspace = true
tokio = { workspace = true, features = ["test-util"] }

[features]
default = ["persistence", "profiling"]

# Feature flags
persistence = ["eframe/persistence"]
profiling = ["dep:puffin", "dep:puffin_egui"]
wgpu = ["dep:wgpu", "dep:pollster", "eframe/wgpu"]
hot-reload = [] # Placeholder for hot reloading
database = ["dep:rusqlite"]
async-db = ["dep:sqlx"]

# Profile optimization flags
[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
strip = true
panic = "abort"

[profile.dev]
opt-level = 1  # Faster compile times with some optimization

[profile.dev.package."*"]
opt-level = 2  # Optimize dependencies even in dev

#==============================================================================
# INDIVIDUAL CRATE EXAMPLES
#==============================================================================

# crates/nebula_core/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_core"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# nebula_foundation = { path = "../nebula_foundation" }
# parking_lot.workspace = true
# dashmap.workspace = true
# slotmap.workspace = true

# crates/nebula_foundation/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_foundation"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# once_cell.workspace = true
# parking_lot.workspace = true
# serde.workspace = true
# thiserror.workspace = true

# crates/nebula_widgets/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_widgets"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# nebula_core = { path = "../nebula_core" }
# nebula_foundation = { path = "../nebula_foundation" }
# nebula_painting = { path = "../nebula_painting" }
# egui.workspace = true
# serde.workspace = true

# crates/nebula_painting/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_painting"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# image.workspace = true
# resvg.workspace = true
# lru.workspace = true
# egui.workspace = true
# serde.workspace = true

# crates/nebula_animation/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_animation"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# nebula_core = { path = "../nebula_core" }
# nebula_foundation = { path = "../nebula_foundation" }
# nebula_scheduler = { path = "../nebula_scheduler" }

# crates/nebula_provider/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_provider"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# nebula_core = { path = "../nebula_core" }
# nebula_foundation = { path = "../nebula_foundation" }
# nebula_widgets = { path = "../nebula_widgets" }
# parking_lot.workspace = true

# crates/nebula_platform/Cargo.toml
# --------------------------------
# [package]
# name = "nebula_platform"
# version.workspace = true
# edition.workspace = true
#
# [dependencies]
# nebula_core = { path = "../nebula_core" }
# nebula_widgets = { path = "../nebula_widgets" }
# eframe.workspace = true
# egui.workspace = true
# tokio.workspace = true
# tracing.workspace = true

#==============================================================================
# EXAMPLES
#==============================================================================

[[example]]
name = "counter"
path = "examples/counter.rs"
required-features = []

[[example]]
name = "animation_demo"
path = "examples/animation_demo.rs"
required-features = []

[[example]]
name = "node_editor"
path = "examples/node_editor.rs"
required-features = []

[[example]]
name = "performance_test"
path = "examples/performance_test.rs"
required-features = ["profiling"]

#==============================================================================
# BUILD SCRIPT (optional)
#==============================================================================
# [build-dependencies]
# Built script dependencies if needed

#==============================================================================
# TARGETS
#==============================================================================
# Support for different platforms
[target.'cfg(target_os = "windows")'.dependencies]
winapi = { version = "0.3", features = ["winuser"] }

[target.'cfg(target_os = "macos")'.dependencies]
cocoa = "0.25"
objc = "0.2"

[target.'cfg(target_os = "linux")'.dependencies]
# Linux-specific dependencies if needed
