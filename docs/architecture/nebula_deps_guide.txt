# Nebula Framework - Dependencies Guide

## üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

### 1. ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)

```toml
# –û—Å–Ω–æ–≤–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
egui = "0.29"              # Immediate mode GUI
eframe = "0.29"            # Platform integration
tokio = { version = "1", features = ["full"] } # Async runtime
serde = { version = "1", features = ["derive"] } # Serialization
parking_lot = "0.12"       # –ë—ã—Å—Ç—Ä—ã–µ Mutex/RwLock
once_cell = "1.20"         # Lazy static
```

**–ü–æ—á–µ–º—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ:**
- `egui/eframe` - –æ—Å–Ω–æ–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
- `tokio` - –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞–Ω–∏–º–∞—Ü–∏–∏)
- `serde` - —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
- `parking_lot` - –±—ã—Å—Ç—Ä–µ–µ std::sync –≤ 2-3 —Ä–∞–∑–∞
- `once_cell` - –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤ (IMAGE_CACHE, SCHEDULER)

---

### 2. üé® –†–ï–ù–î–ï–†–ò–ù–ì & –ì–†–ê–§–ò–ö–ê

```toml
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image = { version = "0.25", features = ["png", "jpeg", "gif", "webp"] }
resvg = "0.44"             # SVG rendering
usvg = "0.44"              # SVG parsing

# –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏
glam = { version = "0.29", features = ["serde"] } # Vector math (Vec2, Vec3)
euclid = "0.22"            # 2D/3D geometry
ordered-float = "4.3"      # Ord/Hash –¥–ª—è f32/f64

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ egui
egui_extras = { version = "0.29", features = ["image", "svg"] }
```

**–ó–∞—á–µ–º –Ω—É–∂–Ω—ã:**
- `image` - –∑–∞–≥—Ä—É–∑–∫–∞ PNG/JPEG/etc –¥–ª—è CachedNetworkImage
- `resvg/usvg` - —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ SVG –∏–∫–æ–Ω–æ–∫
- `glam` - –±—ã—Å—Ç—Ä–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (Vec2::new, Transform)
- `euclid` - –¥–ª—è Rect, Size, Point

---

### 3. üíæ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï & –ü–ê–ú–Ø–¢–¨

```toml
lru = "0.12"               # LRU cache –¥–ª—è ImageCache
dashmap = "6.1"            # Concurrent HashMap (–¥–ª—è ElementTree)
arc-swap = "1.7"           # Atomic Arc swapping
slotmap = "1.0"            # Arena allocator –¥–ª—è Elements
```

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
```rust
// LRU cache –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
static IMAGE_CACHE: Lazy<Mutex<LruCache<String, Image>>> = ...;

// Concurrent map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ elements
static ELEMENT_MAP: DashMap<ElementId, *mut Element> = ...;

// SlotMap –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –±–µ–∑ —É—Ç–µ—á–µ–∫
struct ElementTree {
    elements: SlotMap<ElementKey, Element>,
}
```

---

### 4. üîÑ ASYNC & CONCURRENCY

```toml
tokio = { version = "1", features = ["full"] }
async-trait = "0.1"        # Async traits
futures = "0.3"            # Futures utilities
flume = "0.11"             # –ë—ã—Å—Ç—Ä—ã–µ MPSC channels
```

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
```rust
// Async image loading
impl CachedNetworkImage {
    async fn load_image(&self, url: &str) -> Result<Image> {
        let bytes = reqwest::get(url).await?.bytes().await?;
        image::load_from_memory(&bytes)
    }
}

// Channels –¥–ª—è event loop
let (tx, rx) = flume::unbounded::<WidgetEvent>();
```

---

### 5. üìä –ö–û–õ–õ–ï–ö–¶–ò–ò & –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•

```toml
indexmap = "2.5"           # Ordered HashMap (–¥–ª—è preserving order)
smallvec = "1.13"          # Stack-allocated vectors
tinyvec = "1.8"            # Tiny vectors (< 8 elements)
```

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**
```rust
// –í–º–µ—Å—Ç–æ Vec –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
struct Row {
    children: SmallVec<[Widget; 4]>,  // –û–±—ã—á–Ω–æ 1-4 –¥–µ—Ç–µ–π
}

// Ordered map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ keys
struct GlobalKeyRegistry {
    keys: IndexMap<GlobalKeyId, Element>,  // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
}
```

---

### 6. üêõ ERROR HANDLING & LOGGING

```toml
thiserror = "1.0"          # Error derive macro
anyhow = "1.0"             # Flexible errors
tracing = "0.1"            # Structured logging
tracing-subscriber = "0.3" # Logging backend
```

**–ü—Ä–∏–º–µ—Ä:**
```rust
use thiserror::Error;

#[derive(Error, Debug)]
pub enum NebulaError {
    #[error("Widget not found: {0}")]
    WidgetNotFound(String),
    
    #[error("Image load failed: {0}")]
    ImageLoadError(#[from] image::ImageError),
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
tracing::info!("Building widget tree");
tracing::debug!(count = 42, "Rebuilt {} elements", count);
```

---

### 7. üåê NETWORKING (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)

```toml
reqwest = { version = "0.12", features = ["json", "stream", "rustls-tls"] }
url = "2.5"                # URL parsing
```

**–î–ª—è CachedNetworkImage:**
```rust
let bytes = reqwest::get(url).await?.bytes().await?;
let image = image::load_from_memory(&bytes)?;
```

---

### 8. üé≠ MACROS & CODEGEN

```toml
paste = "1.0"              # Token pasting
quote = "1.0"              # Quasi-quoting
syn = "2.0"                # Rust parser
darling = "0.20"           # Derive attributes
```

**–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–∫—Ä–æ—Å–æ–≤:**
```rust
// #[derive(Widget)] macro
#[proc_macro_derive(Widget, attributes(widget))]
pub fn derive_widget(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as DeriveInput);
    // ...
}
```

---

### 9. ‚è±Ô∏è TIME & SCHEDULING

```toml
chrono = "0.4"             # Date/time
```

**–î–ª—è AnimationController:**
```rust
let start = Instant::now();
let elapsed = start.elapsed();
let duration = Duration::from_millis(300);
```

---

### 10. üî¢ RANDOM & UTILITIES

```toml
rand = "0.8"               # Random numbers
fastrand = "2.1"           # Fast random
ahash = "0.8"              # Fast hashing
itertools = "0.13"         # Iterator extensions
rayon = "1.10"             # Parallelism
```

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
```rust
// Fast random –¥–ª—è UniqueKey
let id = fastrand::u64(..);

// AHash –¥–ª—è HashMap (–±—ã—Å—Ç—Ä–µ–µ default hasher)
use ahash::AHashMap;
type FastMap<K, V> = AHashMap<K, V>;

// Rayon –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
children.par_iter_mut().for_each(|child| {
    child.layout(constraints);
});
```

---

## üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å –º–∏–Ω–∏–º—É–º–∞:

```toml
[dependencies]
egui = "0.29"
eframe = "0.29"
tokio = { version = "1", features = ["rt-multi-thread", "macros", "sync"] }
serde = { version = "1", features = ["derive"] }
parking_lot = "0.12"
once_cell = "1.20"
thiserror = "1.0"
tracing = "0.1"
```

–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è proof-of-concept!

---

## üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä

–î–ª—è production-ready —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞:

```toml
[dependencies]
# Core
egui = "0.29"
eframe = "0.29"
egui_extras = { version = "0.29", features = ["image", "svg"] }

# Async
tokio = { version = "1", features = ["full"] }
async-trait = "0.1"
futures = "0.3"

# Data structures
parking_lot = "0.12"
once_cell = "1.20"
dashmap = "6.1"
lru = "0.12"
indexmap = "2.5"
smallvec = "1.13"
slotmap = "1.0"

# Serialization
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"

# Images
image = { version = "0.25", features = ["png", "jpeg", "webp"] }
reqwest = { version = "0.12", features = ["rustls-tls"] }

# Math
glam = { version = "0.29", features = ["serde"] }
ordered-float = "4.3"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = "0.3"

# Utilities
itertools = "0.13"
ahash = "0.8"
```

---

## üéØ Optional Features

### Profiling
```toml
puffin = "0.19"            # Profiler
puffin_egui = "0.29"       # Profiler UI
```

### Advanced Rendering
```toml
wgpu = "22.1"              # GPU compute (–¥–ª—è custom shaders)
```

### Database Persistence
```toml
rusqlite = { version = "0.32", features = ["bundled"] }
```

---

## ‚ö†Ô∏è –ß—Ç–æ –ù–ï –Ω—É–∂–Ω–æ

**–ò–∑–±–µ–≥–∞–π—Ç–µ:**
- `druid` - —Å–≤–æ–π UI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å egui)
- `gtk`/`qt` bindings - –Ω–µ –Ω—É–∂–Ω—ã —Å egui
- `winit` –Ω–∞–ø—Ä—è–º—É—é - —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ eframe
- `wgpu` –Ω–∞–ø—Ä—è–º—É—é - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã custom shaders

---

## üîß Build Dependencies

–û–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã, –Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ codegen:

```toml
[build-dependencies]
# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω build.rs –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
```

---

## üìä –†–∞–∑–º–µ—Ä Impact

| Dependency | Binary Size | Compile Time | Priority |
|------------|-------------|--------------|----------|
| egui | ~2MB | ~30s | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| tokio | ~500KB | ~45s | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| image | ~800KB | ~20s | ‚≠ê‚≠ê‚≠ê‚≠ê |
| serde | ~100KB | ~15s | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| parking_lot | ~50KB | ~5s | ‚≠ê‚≠ê‚≠ê‚≠ê |
| glam | ~30KB | ~3s | ‚≠ê‚≠ê‚≠ê |

---

## üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞** (7 crates)
2. **–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ** –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ workspace dependencies** –¥–ª—è consistency
4. **–í–∫–ª—é—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ features** (—É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä)
5. **–ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–π—Ç–µ compile times** —Å `cargo build --timings`

---

## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

- [egui docs](https://docs.rs/egui)
- [tokio tutorial](https://tokio.rs/tokio/tutorial)
- [Rust Performance Book](https://nnethercote.github.io/perf-book/)
- [crates.io](https://crates.io)

**–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É! üöÄ**
